(def {nil} {})

; Function definitions.
(def {fun} (\ {args body} {
    def (head args) (\ (tail args) body)
}))

; Unback list for function.
(fun {unpack f xs} {
    eval (join (list f) xs)
})

; Pack list for function.
(fun {pack f & xs} {f xs})

; Curry and Uncurry
(def {uncurry} pack)
(def {curry} unpack)


; Perform Several things in Sequence.
(fun {do & l} {
    if (== l nil)
        {nil}
        {last l}
})

; Open new scope
(fun {let b} {
    ((\ {_} b) ())
})

; Logical functions
(fun {not x} {- 1 x })
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

; Miscellaneous Functions
(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

; First, Second, or Third Item in List
(fun {fst l} { eval (head l) })
(fun {snd l} { eval (head (tail l)) })
(fun {trd l} { eval (head (tail (tail l))) })

; List Length
(fun {len l} {
    if (== l nil)
        {0}
        {+ 1 (len (tail l))}
})

; Nth item in List
(fun {nth n l} {
    if (== n 0)
        {fst l}
        {nth (- n 1) (tail l)}
})

; Take N items
(fun {take n l} {
    if (== n 0)
        {nil}
        {join (head l) (take (- n 1) (tail l))}
})

; Drop N items
(fun {drop n l} {
    if (== n 0)
        {l}
        {drop (- n 1) (tail l)}
})

; Split at N
(fun {split n l} {list (take n l) (drop n l)})

; Element of List
(fun {elem x l} {
    if (== l nil)
        {False}
        {if (== x (fst l)) {True} {elem x (tail l)}}
})

; Last item in List
(fun {last l} {nth (- (len l) 1) l})

; Apply Function to List
(fun {map f l} {
    if (== l nil)
        {nil}
        {join (list (f (fst l))) (map f (tail l))}
})
